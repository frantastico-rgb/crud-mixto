@echo off
REM üß™ Script de testing automatizado para DemoMixto Docker - Windows
REM Este script valida que todos los servicios est√©n funcionando correctamente

echo.
echo ========================================
echo üß™ DEMOMIXTO DOCKER - TESTING WINDOWS
echo ========================================
echo.

REM ============================================================================
REM CONFIGURACI√ìN
REM ============================================================================
set BASE_URL=http://localhost:8080
set MYSQL_URL=http://localhost:8081
set MONGO_URL=http://localhost:8082
set TIMEOUT=30

REM ============================================================================
REM FUNCIONES DE UTILIDAD
REM ============================================================================
:print_success
echo ‚úÖ %~1
goto :eof

:print_error
echo ‚ùå %~1
goto :eof

:print_warning
echo ‚ö†Ô∏è  %~1
goto :eof

:print_info
echo ‚ÑπÔ∏è  %~1
goto :eof

REM ============================================================================
REM VERIFICAR HERRAMIENTAS REQUERIDAS
REM ============================================================================
call :print_info "Verificando herramientas requeridas..."

where curl >nul 2>&1
if %errorlevel% neq 0 (
    call :print_error "curl no est√° instalado - requerido para los tests"
    call :print_info "Instalar curl desde: https://curl.se/windows/"
    pause
    exit /b 1
)

call :print_success "curl est√° disponible"

REM ============================================================================
REM TESTS DE CONECTIVIDAD
REM ============================================================================
echo.
echo ========================================
echo üîå TESTS DE CONECTIVIDAD
echo ========================================

call :print_info "Esperando que DemoMixto App est√© disponible..."
set /a attempts=0
:wait_app
set /a attempts+=1
curl -f -s "%BASE_URL%/actuator/health" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "DemoMixto App est√° disponible"
    goto :app_ready
)
if %attempts% lss 30 (
    echo|set /p="."
    timeout /t 2 /nobreak >nul
    goto :wait_app
)
call :print_error "DemoMixto App no est√° disponible despu√©s de 30 intentos"
goto :end_connectivity

:app_ready
REM Test Health Check
curl -f -s "%BASE_URL%/actuator/health" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "Health Check Endpoint - OK"
) else (
    call :print_error "Health Check Endpoint - FAILED"
)

REM Test Adminer
curl -f -s "%MYSQL_URL%" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "Adminer (MySQL GUI) est√° disponible en %MYSQL_URL%"
) else (
    call :print_warning "Adminer no est√° disponible - puede estar iniciando"
)

REM Test Mongo Express
curl -f -s "%MONGO_URL%" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "Mongo Express (MongoDB GUI) est√° disponible en %MONGO_URL%"
) else (
    call :print_warning "Mongo Express no est√° disponible - puede estar iniciando"
)

:end_connectivity

REM ============================================================================
REM TESTS DE API PROYECTOS (P√öBLICO)
REM ============================================================================
echo.
echo ========================================
echo üìã TESTS DE API PROYECTOS (P√öBLICO)
echo ========================================

REM Test listar proyectos
call :print_info "Testing: GET /api/proyectos - Listar proyectos"
curl -f -s "%BASE_URL%/api/proyectos" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /api/proyectos - Listar proyectos - OK"
) else (
    call :print_error "GET /api/proyectos - Listar proyectos - FAILED"
)

REM Test estad√≠sticas
call :print_info "Testing: GET /api/proyectos/estadisticas - Estad√≠sticas"
curl -f -s "%BASE_URL%/api/proyectos/estadisticas" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /api/proyectos/estadisticas - Estad√≠sticas - OK"
) else (
    call :print_error "GET /api/proyectos/estadisticas - Estad√≠sticas - FAILED"
)

REM Test crear proyecto
call :print_info "Testing: POST /api/proyectos - Crear proyecto"
echo {"nombre":"Proyecto Test Docker Windows","descripcion":"Proyecto creado por script de testing Windows","empleadoId":1,"fechaInicio":"2025-01-16","completado":false} > temp_project.json
curl -f -s -H "Content-Type: application/json" -d @temp_project.json "%BASE_URL%/api/proyectos" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "POST /api/proyectos - Crear proyecto - OK"
) else (
    call :print_error "POST /api/proyectos - Crear proyecto - FAILED"
)
del temp_project.json >nul 2>&1

REM ============================================================================
REM TESTS DE API EMPLEADOS (AUTENTICADO)
REM ============================================================================
echo.
echo ========================================
echo üë• TESTS DE API EMPLEADOS (AUTENTICADO)
echo ========================================

REM Crear token de autenticaci√≥n (admin:admin en Base64)
REM En Windows, usamos certutil para codificar en Base64
echo admin:admin > temp_auth.txt
certutil -encode temp_auth.txt temp_auth_b64.txt >nul 2>&1
REM Leer la l√≠nea del medio (la codificaci√≥n Base64)
for /f "skip=1 tokens=*" %%i in (temp_auth_b64.txt) do (
    set AUTH_TOKEN=%%i
    goto :got_token
)
:got_token
REM Limpiar archivos temporales
del temp_auth.txt temp_auth_b64.txt >nul 2>&1

REM Test listar empleados con autenticaci√≥n
call :print_info "Testing: GET /api/empleados - Listar empleados (con auth)"
curl -f -s -H "Authorization: Basic %AUTH_TOKEN%" "%BASE_URL%/api/empleados" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /api/empleados - Listar empleados - OK"
) else (
    call :print_error "GET /api/empleados - Listar empleados - FAILED"
)

REM Test buscar empleados
call :print_info "Testing: GET /api/empleados/buscar - Buscar empleados"
curl -f -s -H "Authorization: Basic %AUTH_TOKEN%" "%BASE_URL%/api/empleados/buscar?termino=Juan" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /api/empleados/buscar - Buscar empleados - OK"
) else (
    call :print_error "GET /api/empleados/buscar - Buscar empleados - FAILED"
)

REM Test acceso sin autenticaci√≥n (debe fallar)
call :print_info "Testing: GET /api/empleados sin autenticaci√≥n (debe fallar)"
curl -f -s "%BASE_URL%/api/empleados" >nul 2>&1
if %errorlevel% neq 0 (
    call :print_success "GET /api/empleados sin auth - Correctamente denegado"
) else (
    call :print_error "GET /api/empleados sin auth - Deber√≠a haber fallado"
)

REM ============================================================================
REM TESTS DE INTERFACES WEB
REM ============================================================================
echo.
echo ========================================
echo üåê TESTS DE INTERFACES WEB
echo ========================================

REM Test p√°gina principal
call :print_info "Testing: GET / - P√°gina principal"
curl -f -s "%BASE_URL%/" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET / - P√°gina principal - OK"
) else (
    call :print_error "GET / - P√°gina principal - FAILED"
)

REM Test lista de proyectos
call :print_info "Testing: GET /proyectos - Lista de proyectos"
curl -f -s "%BASE_URL%/proyectos" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /proyectos - Lista de proyectos - OK"
) else (
    call :print_error "GET /proyectos - Lista de proyectos - FAILED"
)

REM Test lista de empleados (con auth)
call :print_info "Testing: GET /empleados - Lista de empleados (con auth)"
curl -f -s -H "Authorization: Basic %AUTH_TOKEN%" "%BASE_URL%/empleados" >nul 2>&1
if %errorlevel% equ 0 (
    call :print_success "GET /empleados - Lista de empleados - OK"
) else (
    call :print_error "GET /empleados - Lista de empleados - FAILED"
)

REM ============================================================================
REM RESUMEN FINAL
REM ============================================================================
echo.
echo ========================================
echo üìã RESUMEN FINAL
echo ========================================
echo.
call :print_info "Tests completados!"
echo.
call :print_info "URLs de acceso:"
echo    üì± Aplicaci√≥n: %BASE_URL%
echo    üóÑÔ∏è  Adminer (MySQL): %MYSQL_URL%
echo    üçÉ Mongo Express: %MONGO_URL%
echo.
call :print_info "Credenciales de prueba:"
echo    üë§ Admin: admin / admin
echo    üë§ User: user / password
echo.
call :print_success "üéâ Testing de Docker completado!"
call :print_info "üöÄ DemoMixto est√° funcionando en Docker"
echo.

REM ============================================================================
REM MEN√ö INTERACTIVO
REM ============================================================================
echo ========================================
echo üéØ OPCIONES ADICIONALES
echo ========================================
echo.
echo 1. Ver logs de la aplicaci√≥n
echo 2. Ver logs de MySQL
echo 3. Ver logs de MongoDB
echo 4. Ver estado de contenedores
echo 5. Abrir aplicaci√≥n en navegador
echo 6. Salir
echo.
set /p choice="Selecciona una opci√≥n (1-6): "

if "%choice%"=="1" (
    echo.
    call :print_info "Mostrando logs de la aplicaci√≥n..."
    docker-compose logs demomixto-app
    pause
)
if "%choice%"=="2" (
    echo.
    call :print_info "Mostrando logs de MySQL..."
    docker-compose logs mysql-db
    pause
)
if "%choice%"=="3" (
    echo.
    call :print_info "Mostrando logs de MongoDB..."
    docker-compose logs mongo-db
    pause
)
if "%choice%"=="4" (
    echo.
    call :print_info "Estado de contenedores..."
    docker-compose ps
    pause
)
if "%choice%"=="5" (
    echo.
    call :print_info "Abriendo aplicaci√≥n en navegador..."
    start %BASE_URL%
)
if "%choice%"=="6" (
    goto :end
)

:end
echo.
call :print_success "¬°Gracias por usar DemoMixto!"
pause