package com.miAplicacion.demo.Config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.Components;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * üìö CONFIGURACI√ìN SWAGGER/OpenAPI
 * 
 * ¬øPOR QU√â ES CR√çTICO PARA INTEGRACI√ìN CON CLIENTES?
 * ‚úÖ Documentaci√≥n autom√°tica de todos los endpoints
 * ‚úÖ Schemas de datos para request/response
 * ‚úÖ Ejemplos de uso para desarrolladores externos
 * ‚úÖ Cliente SDK auto-generado en m√∫ltiples lenguajes
 * ‚úÖ Testing interactivo desde el navegador
 * ‚úÖ Contratos API versionados y mantenibles
 */
@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI demoMixtoOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("DemoMixto API - Sistema de Gesti√≥n H√≠brido")
                        .description("""
                                üöÄ **API REST completa para gesti√≥n de empleados y proyectos**
                                
                                ## üéØ Caracter√≠sticas Principales
                                - **Dual Persistence**: MySQL (Empleados) + MongoDB (Proyectos)
                                - **Seguridad**: Autenticaci√≥n HTTP Basic con roles
                                - **CRUD Completo**: Operaciones completas en ambas entidades
                                - **Reportes**: Exportaci√≥n a Excel y an√°lisis de datos
                                - **Testing**: Suite completa de tests automatizados
                                
                                ## üîê Autenticaci√≥n
                                - **Admin**: `admin:admin` (acceso completo a empleados)
                                - **User**: `user:password` (acceso a proyectos)
                                
                                ## üìä Casos de Uso de Integraci√≥n
                                - **ERP Systems**: Sincronizaci√≥n de empleados
                                - **Project Management**: Gesti√≥n de proyectos y tareas
                                - **HR Systems**: Integraci√≥n con sistemas de RRHH
                                - **BI Tools**: Extracci√≥n de datos para an√°lisis
                                - **Mobile Apps**: Backend para aplicaciones m√≥viles
                                
                                ## üõ†Ô∏è Tecnolog√≠as
                                - Spring Boot 3.5.6
                                - Spring Security
                                - JPA + Hibernate (MySQL)
                                - Spring Data MongoDB
                                - Docker Ready
                                """)
                        .version("v1.0.0")
                        .contact(new Contact()
                                .name("DemoMixto Development Team")
                                .email("dev@demomixto.com")
                                .url("https://github.com/your-repo/demomixto"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:8080")
                                .description("üè† Desarrollo Local"),
                        new Server()
                                .url("https://your-app.herokuapp.com")
                                .description("üöÄ Producci√≥n Heroku"),
                        new Server()
                                .url("https://staging-app.herokuapp.com")
                                .description("üß™ Staging Environment")
                ))
                .addSecurityItem(new SecurityRequirement().addList("basicAuth"))
                .components(new Components()
                        .addSecuritySchemes("basicAuth", 
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("basic")
                                        .description("üîê HTTP Basic Authentication\n\n" +
                                                "**Credenciales disponibles:**\n" +
                                                "- Admin: `admin:admin` (acceso completo)\n" +
                                                "- User: `user:password` (solo proyectos)")));
    }
}