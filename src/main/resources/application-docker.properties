# 🐳 Configuración específica para Docker - DemoMixto
# Profile: docker
# Usar con: SPRING_PROFILES_ACTIVE=docker

# ============================================================================
# CONFIGURACIÓN DE LA APLICACIÓN
# ============================================================================
spring.application.name=demomixto-docker

# ============================================================================
# CONFIGURACIÓN MYSQL (Contenedor)
# ============================================================================
# URL de conexión al contenedor MySQL
spring.datasource.url=jdbc:mysql://mysql-db:3306/empresa?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:demomixto}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:DemoMixto2025!}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Pool de conexiones optimizado para contenedores
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000
spring.datasource.hikari.connection-timeout=20000

# Configuración JPA/Hibernate
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# ============================================================================
# CONFIGURACIÓN MONGODB (Contenedor)
# ============================================================================
# Conexión a MongoDB en contenedor
spring.data.mongodb.host=${SPRING_DATA_MONGODB_HOST:mongo-db}
spring.data.mongodb.port=${SPRING_DATA_MONGODB_PORT:27017}
spring.data.mongodb.database=${SPRING_DATA_MONGODB_DATABASE:empresa}
spring.data.mongodb.authentication-database=${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE:admin}
spring.data.mongodb.username=${SPRING_DATA_MONGODB_USERNAME:demomixto}
spring.data.mongodb.password=${SPRING_DATA_MONGODB_PASSWORD:DemoMixto2025!}

# Configuración adicional de MongoDB
spring.data.mongodb.auto-index-creation=true
spring.main.allow-bean-definition-overriding=true

# ============================================================================
# CONFIGURACIÓN DE SEGURIDAD
# ============================================================================
# Usuarios en memoria (para demo)
spring.security.user.name=admin
spring.security.user.password={bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW
spring.security.user.roles=ADMIN

# ============================================================================
# CONFIGURACIÓN DEL SERVIDOR
# ============================================================================
# Puerto del servidor (interno del contenedor)
server.port=8080

# Configuración de contexto
server.servlet.context-path=/

# Configuración de compresión
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Timeouts optimizados para contenedores
server.connection-timeout=20000
server.keep-alive-timeout=20000

# ============================================================================
# CONFIGURACIÓN DE LOGGING
# ============================================================================
# Nivel de logging para desarrollo
logging.level.com.miAplicacion=${LOGGING_LEVEL_COM_MIAPLICACION:INFO}
logging.level.org.springframework.web=${LOGGING_LEVEL_SPRING_WEB:INFO}
logging.level.org.springframework.security=${LOGGING_LEVEL_SPRING_SECURITY:INFO}
logging.level.org.hibernate.SQL=${LOGGING_LEVEL_HIBERNATE_SQL:WARN}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOGGING_LEVEL_HIBERNATE_BINDER:WARN}

# Configuración de archivos de log
logging.file.name=/app/logs/demomixto.log
logging.file.max-size=10MB
logging.file.max-history=30
logging.logback.rollingpolicy.total-size-cap=100MB

# Patrón de logging para contenedores
logging.pattern.console=${LOGGING_PATTERN_CONSOLE:%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n}
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# ============================================================================
# CONFIGURACIÓN DE ACTUATOR (Monitoreo)
# ============================================================================
# Habilitar endpoints para Docker healthcheck
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.health.db.enabled=true
management.health.mongo.enabled=true

# Puerto separado para actuator (opcional)
management.server.port=8080
management.server.base-path=/actuator

# Información de la aplicación
management.info.env.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true

# ============================================================================
# CONFIGURACIÓN DE THYMELEAF
# ============================================================================
# Optimizaciones para contenedores
spring.thymeleaf.cache=true
spring.thymeleaf.check-template=false
spring.thymeleaf.check-template-location=false

# ============================================================================
# CONFIGURACIÓN DE INTERNACIONALIZACIÓN
# ============================================================================
# Configuración regional para Docker
spring.web.locale=es_CO
spring.web.locale-resolver=fixed
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ============================================================================
# CONFIGURACIÓN DE CACHE
# ============================================================================
# Cache para optimizar rendimiento en contenedores
spring.cache.type=simple
spring.cache.cache-names=empleados,proyectos

# ============================================================================
# CONFIGURACIÓN DE RECURSOS ESTÁTICOS
# ============================================================================
# Configuración para servir recursos estáticos
spring.web.resources.cache.cachecontrol.max-age=86400
spring.web.resources.cache.cachecontrol.must-revalidate=true
spring.web.resources.cache.cachecontrol.cache-public=true

# ============================================================================
# CONFIGURACIÓN JVM ESPECÍFICA PARA DOCKER
# ============================================================================
# Variables que se pueden usar en docker-compose.yml:
# JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0