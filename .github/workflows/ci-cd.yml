# 🚀 CI/CD Pipeline para DemoMixto
# Automatiza testing, build y deployment en cada push/PR

name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🧪 TESTING Y VALIDACIÓN
  test:
    name: 🧪 Tests y Quality Checks
    runs-on: ubuntu-latest
    
    services:
      # 🗄️ MySQL para tests de integración
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: empresa_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      # 🍃 MongoDB para tests de integración
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpassword
          MONGO_INITDB_DATABASE: empresa_test
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.runCommand(\"ping\")'" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    # ⬇️ Checkout código
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    # ☕ Setup Java 17
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # 🔧 Cache dependencies
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # ✅ Ejecutar tests unitarios
    - name: 🧪 Run Unit Tests
      run: |
        mvn clean test -Dspring.profiles.active=test
        echo "✅ Tests unitarios completados"

    # 🔍 Ejecutar tests de integración
    - name: 🔗 Run Integration Tests
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/empresa_test
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_DATA_MONGODB_URI: mongodb://testuser:testpassword@localhost:27017/empresa_test?authSource=admin
      run: |
        mvn verify -Dspring.profiles.active=integration-test
        echo "✅ Tests de integración completados"

    # 📊 Reporte de cobertura
    - name: 📊 Generate Test Coverage Report
      run: |
        mvn jacoco:report
        echo "📊 Reporte de cobertura generado"

    # 📤 Upload coverage to Codecov
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: demomixto-coverage

    # 🔍 SonarQube análisis de código
    - name: 🔍 SonarQube Code Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ "$SONAR_TOKEN" != "" ]; then
          mvn sonar:sonar \
            -Dsonar.projectKey=frantastico-rgb_crud-mixto \
            -Dsonar.organization=frantastico-rgb \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
          echo "🔍 Análisis SonarQube completado"
        else
          echo "⚠️ SONAR_TOKEN no configurado, saltando análisis"
        fi

  # 📦 BUILD Y PACKAGING
  build:
    name: 📦 Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # 🏗️ Build application
    - name: 🏗️ Build JAR
      run: |
        mvn clean package -DskipTests
        echo "📦 Build completado exitosamente"

    # 📤 Upload JAR artifact
    - name: 📤 Upload JAR Artifact
      uses: actions/upload-artifact@v3
      with:
        name: demomixto-jar
        path: target/*.jar
        retention-days: 30

  # 🐳 DOCKER BUILD
  docker-build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    # 🐳 Setup Docker Buildx
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 🔐 Login to DockerHub
    - name: 🔐 Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 🏗️ Build and push Docker image
    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          frantasticodev/demomixto:latest
          frantasticodev/demomixto:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 DEPLOYMENT (solo en main)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://demomixto.herokuapp.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    # 📤 Download build artifacts
    - name: 📥 Download JAR Artifact
      uses: actions/download-artifact@v3
      with:
        name: demomixto-jar
        path: target/

    # 🚀 Deploy to Heroku (ejemplo)
    - name: 🚀 Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "demomixto-prod"
        heroku_email: "tu-email@ejemplo.com"
        usedocker: true
        docker_build_args: |
          NODE_ENV
          SECRET_KEY

    # 🔔 Notificación de deployment exitoso
    - name: 🔔 Notify Deployment Success
      if: success()
      run: |
        echo "✅ Deployment exitoso a producción"
        echo "🌐 URL: https://demomixto.herokuapp.com"

    # ⚠️ Notificación de error
    - name: ⚠️ Notify Deployment Failure
      if: failure()
      run: |
        echo "❌ Deployment falló"
        echo "🔍 Revisar logs para más detalles"

  # � DEPLOYMENT A RAILWAY (ALTERNATIVO)
  deploy-railway:
    name: 🚄 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[railway]')
    
    steps:
    # ⬇️ Checkout código
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    # 🚄 Deploy to Railway using CLI
    - name: 🚄 Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Install Railway CLI
        npm install -g @railway/cli
        
        # Deploy to Railway
        railway deploy --service=${{ secrets.RAILWAY_SERVICE_ID || 'demomixto' }}
    
    # 🔔 Notificación Railway success
    - name: 🔔 Notify Railway Deployment Success
      if: success()
      run: |
        echo "✅ Railway deployment exitoso"
        echo "🌐 URL: https://demomixto.up.railway.app"

  # �📊 REPORTES Y NOTIFICACIONES
  notify:
    name: 📊 Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: 📊 Pipeline Status Report
      run: |
        echo "📊 REPORTE PIPELINE CI/CD"
        echo "========================"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "📦 Build: ${{ needs.build.result }}"
        echo "🚀 Deploy: ${{ needs.deploy.result }}"
        echo "⏰ Timestamp: $(date)"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"